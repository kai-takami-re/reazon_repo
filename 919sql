-- StandardSQL (BigQuery)
-- Daily pay rate where denominator = active new users that day (registered within last 30 days and logged in that day), numerator = those who paid that day (JST)
WITH calendar AS (
  SELECT day
  FROM UNNEST(GENERATE_DATE_ARRAY(
    DATE_SUB(CURRENT_DATE('Asia/Tokyo'), INTERVAL 90 DAY),
    CURRENT_DATE('Asia/Tokyo')
  )) AS day
),
users AS (
  SELECT
    s.uMasterId,
    DATE(TIMESTAMP(s.createdAt), 'Asia/Tokyo') AS registered_date
  FROM `db_data.u_status` AS s
  JOIN `analytics.valid_user` v USING (uMasterId)
),
day_logins AS (
  SELECT DISTINCT
    l.uMasterId,
    DATE(TIMESTAMP(l.createdAt), 'Asia/Tokyo') AS day
  FROM `db_log.u_daily_login` AS l
),
day_payments AS (
  SELECT DISTINCT
    p.uMasterId,
    DATE(TIMESTAMP(p.createdAt), 'Asia/Tokyo') AS day
  FROM `db_log.u_payment` AS p
  -- If you only want successful monetary payments, add a condition like:
  -- WHERE p.amount > 0
),
cohorts AS (
  SELECT
    c.day,
    u.uMasterId
  FROM calendar AS c
  JOIN users AS u
    ON u.registered_date BETWEEN DATE_SUB(c.day, INTERVAL 30 DAY) AND c.day
),
new_users_active AS (
  SELECT
    coh.day,
    coh.uMasterId
  FROM cohorts AS coh
  JOIN day_logins AS dl
    ON dl.day = coh.day AND dl.uMasterId = coh.uMasterId
)
SELECT
  c.day AS as_of_date,
  COUNT(anu.uMasterId) AS active_new_users,
  COUNTIF(dp.uMasterId IS NOT NULL) AS paying_active_new_users,
  SAFE_DIVIDE(COUNTIF(dp.uMasterId IS NOT NULL), COUNT(anu.uMasterId)) AS paying_rate
FROM calendar AS c
LEFT JOIN new_users_active AS anu
  ON anu.day = c.day
LEFT JOIN day_payments AS dp
  ON dp.day = c.day AND dp.uMasterId = anu.uMasterId
GROUP BY c.day
ORDER BY c.day;
