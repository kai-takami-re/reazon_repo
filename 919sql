-- StandardSQL (BigQuery)
-- Pay rate per day using rolling 30-day registration cohorts (JST)
WITH calendar AS (
  SELECT day
  FROM UNNEST(GENERATE_DATE_ARRAY(
    DATE_SUB(CURRENT_DATE('Asia/Tokyo'), INTERVAL 90 DAY),
    CURRENT_DATE('Asia/Tokyo')
  )) AS day
),
users AS (
  SELECT
    s.uMasterId,
    DATE(TIMESTAMP(s.createdAt), 'Asia/Tokyo') AS registered_date
  FROM `db_data.u_status` AS s
  JOIN `analytics.valid_user` v USING (uMasterId)
),
first_payment AS (
  SELECT
    p.uMasterId,
    MIN(DATE(TIMESTAMP(p.createdAt), 'Asia/Tokyo')) AS first_payment_date  -- change p.createdAt to your actual payment timestamp column
  FROM `db_log.u_payment` AS p
  -- If you only want successful monetary payments, add a condition like:
  -- WHERE p.amount > 0
  GROUP BY p.uMasterId
),
cohorts AS (
  SELECT
    c.day,
    u.uMasterId
  FROM calendar AS c
  JOIN users AS u
    ON u.registered_date BETWEEN DATE_SUB(c.day, INTERVAL 30 DAY) AND c.day
)
SELECT
  c.day AS as_of_date,
  COUNT(coh.uMasterId) AS registered_last_30d,
  COUNTIF(fp.first_payment_date IS NOT NULL AND fp.first_payment_date <= c.day) AS paying_users_among_cohort,
  SAFE_DIVIDE(
    COUNTIF(fp.first_payment_date IS NOT NULL AND fp.first_payment_date <= c.day),
    COUNT(coh.uMasterId)
  ) AS paying_rate
FROM calendar AS c
LEFT JOIN cohorts AS coh
  ON coh.day = c.day
LEFT JOIN first_payment AS fp
  ON fp.uMasterId = coh.uMasterId
GROUP BY c.day
ORDER BY c.day;
